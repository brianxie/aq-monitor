{"version":3,"sources":["index.js"],"names":["Button","className","type","class","onClick","props","handleClick","this","count","React","Component","Status","aqiText","position","pollFn","timerId","setInterval","clearInterval","Monitor","state","statusActive","jsonResult","lat","parseFloat","Lat","lon","Lon","result","taggedResult","dLat","coords","latitude","dLon","longitude","Math","sqrt","pow","taggedResults","sort","a","b","distanceFromPosition","map","filteredResults","JSON","parse","Stats","v1","response","ok","Error","status","fetch","then","checkResponseOk","json","jsonObj","results","createTaggedResult","error","resultErrorString","message","positionErrorString","setState","console","log","Date","positionPromise","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","rawResultsPromise","getRawResults","positionString","toString","catch","handlePositionError","handleResultError","all","promises","getSortedResults","handleFilteredResults","aqi","toggleStatus","appearFn","in","appear","timeout","classNames","renderButton","renderStatusPlaceholder","renderStatus","updateStatusAndButton","bind","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8d6d1fa.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CSSTransition} from 'react-transition-group';\nimport './index.css';\n\n// handleClick, count\nclass Button extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"Button\"\n        type=\"button\"\n        class=\"btn btn-outline-secondary btn-lg\"\n        onClick={() => this.props.handleClick()}\n      >\n        {\"Number of times I've been updated: \"}\n        {this.props.count}\n      </button>\n    );\n  }\n}\n\n// aqiText, position\nclass Status extends React.Component {\n  render() {\n    return (\n      <div\n        className=\"Status\"\n        class=\"card text-left border-secondary\"\n      >\n        <div\n          className=\"AQI\"\n          class=\"card-body\"\n        >\n          {this.props.aqiText}\n        </div>\n        <div\n          className=\"Position\"\n          class=\"card-body\"\n        >\n          {\"Your position: \"}\n          {this.props.position}\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.props.pollFn();\n    const pollIntervalMillis = 30000; // 30 seconds\n    this.timerId = setInterval(\n      () => this.props.pollFn(),\n      pollIntervalMillis\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n}\n\nclass Monitor extends React.Component {\n  // Global state for now, so I don't factor myself into a corner.\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      statusActive: false,\n      aqiText: \"Default AQI text.\",\n      position: \"Default position.\",\n    };\n  }\n\n  // Transforms a result into an object containing the latitude, longitude, and result itself.\n  createTaggedResult(jsonResult) {\n    return {lat:parseFloat(jsonResult.Lat), lon:parseFloat(jsonResult.Lon), result:jsonResult};\n  }\n\n  // Computes distance between a single result and the provided position using the Euclidean metric.\n  distanceFromPosition(taggedResult, position) {\n    var dLat = taggedResult.lat - position.coords.latitude;\n    var dLon = taggedResult.lon - position.coords.longitude;\n    return Math.sqrt(Math.pow(dLat, 2) + Math.pow(dLon, 2));\n  }\n\n  // Sorts results by distance, increasing.\n  getSortedResults(taggedResults, position) {\n    return taggedResults.sort((a, b) =>\n      this.distanceFromPosition(a, position) - this.distanceFromPosition(b, position))\n      .map(taggedResult => taggedResult.result);\n  }\n\n  // Returns the PM2.5 value for the closest result.\n  // This should really do more intelligent integration of multiple results.\n  handleFilteredResults(filteredResults) {\n    var stats = JSON.parse(filteredResults[0].Stats);\n    // Take ten-minute average.\n    return stats.v1;\n  }\n\n  checkResponseOk(response) {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response;\n  }\n\n  // Reads raw sensor results from purpleair.\n  // Future function.\n  getRawResults() {\n    const srcUrl = \"https://www.purpleair.com/json\";\n    return fetch(srcUrl)\n      .then(response => this.checkResponseOk(response))\n      .then(response => response.json())\n      .then(jsonObj => jsonObj.results)\n      .then(results => results.map(result => this.createTaggedResult(result)));\n  }\n\n  handleResultError(error) {\n    const resultErrorString = \"Error in fetching sensors: \" + error.message;\n    // Rethrow the error for subsequent nodes.\n    throw new Error(resultErrorString);\n  }\n\n  handlePositionError(error) {\n    const positionErrorString = \"Error in fetching position: \" + error.message;\n    this.setState({position: positionErrorString});\n    // Rethrow the error for subsequent nodes.\n    throw new Error(positionErrorString);\n  }\n\n  // Fetches location and sensor readings, and updates the status.\n  updateStatusAndButton() {\n    console.log(\"[\" + new Date() + \"] updating...\");\n    this.setState({count: this.state.count + 1});\n    this.setState({aqiText: \"Request pending...\"});\n    this.setState({position: \"Position pending...\"});\n\n    // Issue requests for position and sensor readings.\n    var positionPromise = function (options) {\n        return new Promise(function(resolve, reject) {\n          navigator.geolocation.getCurrentPosition(resolve, reject, options);\n        });\n    }();\n    var rawResultsPromise = this.getRawResults();\n\n    // Check for errors in fetching position, and update UI immediately if possible.\n    positionPromise = positionPromise\n      .then(position => {\n        var positionString =\n          position.coords.latitude.toString()\n            + \", \"\n            + position.coords.longitude.toString();\n        this.setState({position: positionString});\n        // Return the original position, so that subsequent logic can work with it.\n        // Pretty-print is only for UI purposes.\n        return position;\n      })\n      .catch(error => this.handlePositionError(error));\n\n    // Check for errors with the sensor reading per se, because Promise.all fails fast.\n    // The AQI value can't be updated until we have both position and sensor readings.\n    rawResultsPromise = rawResultsPromise\n      .catch(error => this.handleResultError(error));\n\n    // Compute PM2.5 and update UI.\n    Promise.all([rawResultsPromise, positionPromise])\n      .then(promises => this.getSortedResults(promises[0], promises[1]))\n      .then(filteredResults => this.handleFilteredResults(filteredResults))\n      .then(aqi => this.setState({aqiText: aqi}))\n      .catch(error => this.setState({aqiText: error.message}));\n  }\n\n  renderStatus(pollFn) {\n    return(\n      <div class=\"container p-3\">\n        <Status\n          aqiText={this.state.aqiText}\n          position={this.state.position}\n          pollFn={pollFn}\n        />\n      </div>);\n  }\n\n  toggleStatus() {\n    this.setState({statusActive: !this.state.statusActive});\n  }\n\n  renderButton() {\n    return(\n      <div class=\"container p-3\">\n        <Button\n          count={this.state.count}\n          handleClick={() => this.toggleStatus()}\n        />\n      </div>);\n  }\n\n  renderStatusPlaceholder(statusActive, appearFn) {\n    // Exit animations wouldn't work, because of the immediate unrendering.\n    return(\n      <CSSTransition\n        in={statusActive}\n        appear={true}\n        timeout={300}\n        classNames=\"StatusTransition\"\n      >\n        <div>\n          {statusActive && appearFn}\n        </div>\n      </CSSTransition>\n    );\n  }\n\n  render() {\n    return(\n      <div\n        className=\"Monitor\"\n        class=\"container m-5\"\n      >\n        {this.renderButton()}\n        {this.renderStatusPlaceholder(\n          this.state.statusActive,\n          this.renderStatus(this.updateStatusAndButton.bind(this)))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Monitor />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}