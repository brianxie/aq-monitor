{"version":3,"sources":["Button.js","Sensor.js","ResponseUtils.js","MarkupUtils.js","PositionComponent.js","SensorsComponent.js","TimeUtils.js","TimerComponent.js","Status.js","index.js"],"names":["Button","className","type","onClick","props","handleClick","this","text","React","Component","TimeDataKeys","PositionKeys","SensorModel","timeData","positionData","ResponseStates","ResponseProperties","ResponseSuccess","value","ResponseFailure","err","ResponsePending","wrapInContainer","PositionComponent","renderCurrentPositionElement","renderButton","updateFn","positionResult","MarkupUtils","tag","ResponseUtils","parsePositionValue","Error","toString","positionValue","Sensor","RADIANS_PER_DEGREE","Math","PI","haversine","deltaRadians","pow","sin","distanceFromCurrentPosition","sensorModel","position","sensorLatRadians","sensorLonRadians","posLatRadians","posLonRadians","havLat","havLon","havCentralAngle","cos","asin","sqrt","SensorsComponent","getClosestSensorsElements","limit","sensorModelsResult","positionTag","sensorModelsTag","map","distance","wrapSensorModelWithDistance","sort","a","b","slice","sensorWithDistance","computeAndFormatSensor","aqi","C","C_low","C_high","I_low","I_high","computeAQIPM25","getRealtimeConcentration","badgeTag","toFixed","TimerState","Timer","timerState","remainingTimeMillis","defaultTimeMillis","callback","deltaMillis","newRemainingTimeMillis","floor","TimerComponent","state","timer","setState","TimeUtils","pollIntervalMillis","timerId","setInterval","decrement","clearInterval","renderTimer","renderButtonGroup","pause","resume","reset","timerText","getRemainingTime","role","renderToggleButton","renderResetButton","buttonText","togglePauseResumeTimer","resetTimer","constructPositionData","latitude","longitude","getSensorResults","fetch","then","response","ok","status","checkResponseOk","json","jsonObj","results","result","jsonResult","stats","JSON","parse","Stats","v","v1","v2","v3","v4","v5","Lat","Lon","createSensorModel","filter","Status","updateStatusAsync","updatePositionAsync","error","positionErrorString","message","sensorModelsErrorString","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","parseFloat","coords","catch","handlePositionError","sensorModels","handleResultError","refreshPosition","positionPromise","console","log","Date","hasPreviousPosition","sensorModelsPromise","updateSensorModelsAsync","all","Monitor","statusActive","toggleStatus","appearFn","CSSTransition","in","appear","timeout","classNames","renderStatusPlaceholder","renderStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0578f182.chunk.js","sourcesContent":["import React from 'react';\n\n// props::handleClick\n// props::text\nclass Button extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"btn btn-outline-dark btn-sm\"\n        type=\"button\"\n        onClick={() => this.props.handleClick()}\n      >\n        {this.props.text}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","// Datatypes for constructing a sensor model.\n// This is an internal, non-rendered data representation.\n// The SensorsComponent React component deals with actually using these fields.\nexport const TimeDataKeys = {\n  REALTIME: \"realtime\",\n  TEN_MINUTES: \"ten_minutes\",\n  THIRTY_MINUTES: \"thirty_minutes\",\n  ONE_HOUR: \"one_hour\",\n  SIX_HOURS: \"six_hours\",\n  ONE_DAY: \"one_day\",\n}\n\nexport const PositionKeys = {\n  LATITUDE: \"latitude\",\n  LONGITUDE: \"longitude\",\n}\n\nexport class SensorModel {\n  constructor(timeData, positionData) {\n    // These could be classes, but having enumerable properties is convenient.\n    this.timeData = timeData;\n    this.positionData = positionData;\n  }\n\n  getRealtimeConcentration() {\n    return this.timeData[TimeDataKeys.REALTIME];\n  }\n\n  getLatitude() {\n    return this.positionData[PositionKeys.LATITUDE];\n  }\n\n  getLongitude() {\n    return this.positionData[PositionKeys.LONGITUDE];\n  }\n}\n","export const ResponseStates = {\n  SUCCESS: \"success\",\n  FAILURE: \"failure\",\n  PENDING: \"pending\",\n}\n\nexport const ResponseProperties = {\n  TAG: \"tag\",\n  VALUE: \"value\",\n  ERR: \"err\",\n}\n\n// TODO: Figure out how this wraps the response sum types.\nexport const Response = (response) => ({\n  [ResponseProperties.TAG]: response[ResponseProperties.TAG],\n  [ResponseProperties.VALUE]: response[ResponseProperties.TAG] === ResponseStates.SUCCESS\n    ? response[ResponseProperties.VALUE]\n    : null,\n  [ResponseProperties.ERR]: response[ResponseProperties.TAG] === ResponseStates.FAILURE\n    ? response[ResponseProperties.ERR]\n    : null,\n});\n\nexport const ResponseSuccess = (value) => ({\n  [ResponseProperties.TAG]: ResponseStates.SUCCESS,\n  [ResponseProperties.VALUE]: value,\n});\n\nexport const ResponseFailure = (err) => ({\n  [ResponseProperties.TAG]: ResponseStates.FAILURE,\n  [ResponseProperties.ERR]: err,\n});\n\nexport const ResponsePending = () => ({\n  [ResponseProperties.TAG]: ResponseStates.PENDING,\n});\n\nexport function isSuccessful(responseType) {\n  return responseType[ResponseProperties.TAG] === ResponseStates.SUCCESS;\n}\n","import React from 'react';\n\nexport function wrapInCardBody(text) {\n  return (\n    <div className=\"card-body\">\n      {text}\n    </div >\n  );\n}\n\nexport function wrapInContainer(text) {\n  return (\n    <div className=\"container\">\n      {text}\n    </div >\n  );\n}\n\nexport function severityBadgeOf(aqi) {\n  var badgeTag;\n  if (aqi <= 50) {\n    badgeTag = \"success\";\n  } else if (aqi <= 150) {\n    badgeTag = \"warning\";\n  } else {\n    badgeTag = \"danger\";\n  }\n\n  return (\n    <div className={\"badge badge-\" + badgeTag}>\n      {aqi.toString()}\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from './Button';\nimport * as Sensor from './Sensor';\nimport * as ResponseUtils from './ResponseUtils';\nimport * as MarkupUtils from './MarkupUtils';\n\n// props::positionResult\n// props::updateFn\nclass PositionComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"card border-secondary PositionComponent\">\n        {this.renderCurrentPositionElement()}\n        {this.renderButton()}\n      </div>\n    );\n  }\n\n  renderButton() {\n    return(\n      <div className=\"container\">\n        <Button\n          text={\"Refresh location\"}\n          handleClick={() => this.props.updateFn()} />\n      </div>\n    );\n  }\n\n  renderCurrentPositionElement() {\n    var positionResult = this.props.positionResult;\n    if (positionResult == null) {\n      return MarkupUtils.wrapInContainer(\"Position unknown\");\n    }\n\n    var tag = positionResult[ResponseUtils.ResponseProperties.TAG];\n    switch (tag) {\n      case ResponseUtils.ResponseStates.SUCCESS:\n        return MarkupUtils.wrapInContainer(\n          this.parsePositionValue(\n            positionResult[ResponseUtils.ResponseProperties.VALUE]));\n      case ResponseUtils.ResponseStates.FAILURE:\n        return MarkupUtils.wrapInContainer(\n          \"Error: \" + positionResult[ResponseUtils.ResponseProperties.ERR]);\n      case ResponseUtils.ResponseStates.PENDING:\n        return MarkupUtils.wrapInContainer(\"Fetching position...\");\n      default:\n        throw new Error(\"Unrecognized tag: \" + tag.toString());\n    }\n  }\n\n  parsePositionValue(positionValue) {\n    return (\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Latitude: {positionValue[Sensor.PositionKeys.LATITUDE].toString()}\n        </li>\n        <li className=\"list-group-item\">\n          Longitude: {positionValue[Sensor.PositionKeys.LONGITUDE].toString()}\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default PositionComponent;\n","import React from 'react';\nimport Button from  './Button';\nimport * as Sensor from './Sensor';\nimport * as MarkupUtils from './MarkupUtils';\nimport * as ResponseUtils from './ResponseUtils';\n\nconst MAX_SENSORS = 6;\nconst RADIANS_PER_DEGREE = Math.PI / 180;\nconst RADIUS = 6371; // km\n\nfunction computeAQIPM25(C) {\n  var C_low;\n  var C_high;\n  var I_low;\n  var I_high;\n\n  if (C <= 12.0) {\n    C_low = 0.0;\n    C_high = 12.0;\n    I_low = 0;\n    I_high = 50;\n  } else if (C <= 35.4) {\n    C_low = 12.1;\n    C_high = 35.4;\n    I_low = 51;\n    I_high = 100;\n  } else if (C <= 55.4) {\n    C_low = 35.5;\n    C_high = 55.4;\n    I_low = 101;\n    I_high = 150;\n  } else if (C <= 150.4) {\n    C_low = 55.5;\n    C_high = 150.4;\n    I_low = 151;\n    I_high = 200;\n  } else if (C <= 250.4) {\n    C_low = 150.5;\n    C_high = 250.4;\n    I_low = 201;\n    I_high = 300;\n  } else if (C <= 350.4) {\n    C_low = 250.5;\n    C_high = 350.4;\n    I_low = 301;\n    I_high = 400;\n  } else if (C <= 500.4) {\n    C_low = 350.5;\n    C_high = 500.4;\n    I_low = 401;\n    I_high = 500;\n  } else {\n    throw new Error(\n      \"AQI is _literally incapable_ of measuring this concentration\");\n  }\n\n  return ((C - C_low) * (I_high - I_low) / (C_high - C_low)) + I_low;\n}\n\nfunction haversine(deltaRadians) {\n  return Math.pow(Math.sin(deltaRadians / 2), 2);\n}\n\n// Computes distance between a single result and the provided position using\n// the Haversine formula.\nfunction distanceFromCurrentPosition(sensorModel, position) {\n  var sensorLatRadians = RADIANS_PER_DEGREE\n    * sensorModel.positionData[Sensor.PositionKeys.LATITUDE];\n  var sensorLonRadians = RADIANS_PER_DEGREE\n    * sensorModel.positionData[Sensor.PositionKeys.LONGITUDE];\n  var posLatRadians = RADIANS_PER_DEGREE\n    * position[Sensor.PositionKeys.LATITUDE];\n  var posLonRadians = RADIANS_PER_DEGREE\n    * position[Sensor.PositionKeys.LONGITUDE];\n\n  var havLat = haversine(sensorLatRadians - posLatRadians);\n  var havLon = haversine(sensorLonRadians - posLonRadians);\n\n  var havCentralAngle =\n    havLat\n      + Math.cos(posLatRadians) * Math.cos(sensorLatRadians) * havLon;\n\n  return 2 * RADIUS * Math.asin(Math.sqrt(havCentralAngle));\n}\n\n// Returns an object containing the sensor and its distance from the provided\n// position in kilometers.\nfunction wrapSensorModelWithDistance(sensorModel, position) {\n  return {\n    sensorModel: sensorModel,\n    distance: distanceFromCurrentPosition(sensorModel, position)\n  }\n}\n\n// props::sensorModelsResult\n// props::positionResult\n// props::updateFn\nclass SensorsComponent extends React.Component {\n  render() {\n    return (\n      <div className=\"card border-secondary SensorsComponent\">\n        {this.getClosestSensorsElements(MAX_SENSORS)}\n        {this.renderButton()}\n      </div>\n    );\n  }\n\n  renderButton() {\n    return(\n      <div className=\"container\">\n        <Button\n          text={\"Refresh sensor data\"}\n          handleClick={() => this.props.updateFn()} />\n      </div>\n    );\n  }\n\n  getClosestSensorsElements(limit) {\n    var positionResult = this.props.positionResult;\n    var sensorModelsResult = this.props.sensorModelsResult;\n    if (positionResult == null || sensorModelsResult == null) {\n      return MarkupUtils.wrapInContainer(\"No sensor data\");\n    }\n\n    var positionTag = positionResult[ResponseUtils.ResponseProperties.TAG];\n    var sensorModelsTag = sensorModelsResult[ResponseUtils.ResponseProperties.TAG];\n\n    if (positionTag === ResponseUtils.ResponseStates.FAILURE\n      && sensorModelsTag === ResponseUtils.ResponseStates.FAILURE) {\n      // Double failure.\n      return MarkupUtils.wrapInContainer(\n        \"Error: \"\n        + positionResult[ResponseUtils.ResponseProperties.ERR]\n        + \" | \"\n        + sensorModelsResult[ResponseUtils.ResponseProperties.ERR]);\n    } else if (positionTag === ResponseUtils.ResponseStates.FAILURE\n      || sensorModelsTag === ResponseUtils.ResponseStates.FAILURE) {\n      // Single failure.\n      var oneOfErrorString = (positionTag === ResponseUtils.ResponseStates.FAILURE)\n        ? positionResult[ResponseUtils.ResponseProperties.ERR]\n        : sensorModelsResult[ResponseUtils.ResponseProperties.ERR];\n      return MarkupUtils.wrapInContainer(\"Error: \" + oneOfErrorString);\n    } else if (positionTag === ResponseUtils.ResponseStates.PENDING\n      || sensorModelsTag === ResponseUtils.ResponseStates.PENDING) {\n      // Pending.\n      return MarkupUtils.wrapInContainer(\"Fetching sensor data...\");\n    } else if (positionTag === ResponseUtils.ResponseStates.SUCCESS\n      && sensorModelsTag === ResponseUtils.ResponseStates.SUCCESS) {\n      // All successful.\n      var position = positionResult[ResponseUtils.ResponseProperties.VALUE];\n      var sensorModels = sensorModelsResult[ResponseUtils.ResponseProperties.VALUE];\n\n      // TODO: The sorting can be cached in state.\n      return sensorModels\n        .map(sensorModel => wrapSensorModelWithDistance(sensorModel, position))\n        .sort((a, b) => a[\"distance\"] - b[\"distance\"])\n        .slice(0, limit)\n        .map(sensorWithDistance => this.computeAndFormatSensor(sensorWithDistance));\n    }\n\n    throw new Error(\n      \"ResponseState could not be handled: \"\n        + positionTag.toString() + \" | \" + sensorModelsTag.toString());\n  }\n\n  computeAndFormatSensor(sensorWithDistance) {\n    var aqi = computeAQIPM25(\n      sensorWithDistance[\"sensorModel\"].getRealtimeConcentration());\n    return (\n      <div className=\"container Sensor\">\n        <h2>\n          {MarkupUtils.severityBadgeOf(aqi.toFixed(0))}\n        </h2>\n        {\" \"}\n        ({sensorWithDistance[\"distance\"].toFixed(2).toString()}km from you)\n      </div>\n    );\n  }\n}\n\nexport default SensorsComponent;\n","export const TimerState = {\n  RUNNING: \"running\",\n  PAUSED: \"paused\",\n  EXPIRED: \"expired\", // unused\n  INACTIVE: \"inactive\", // unused\n}\n\nexport class Timer {\n  constructor(timerState, remainingTimeMillis, defaultTimeMillis, callback) {\n    this.timerState = timerState;\n    this.remainingTimeMillis = remainingTimeMillis;\n    this.defaultTimeMillis = defaultTimeMillis;\n    this.callback = callback;\n  }\n\n  decrement(deltaMillis) {\n    // No-op if the timer is not running.\n    if (this.timerState !== TimerState.RUNNING) {\n      return this;\n    }\n\n    var newRemainingTimeMillis = this.remainingTimeMillis - deltaMillis;\n\n    // If the timer is already expired, execute the callback and reset the\n    // timer.\n    if (newRemainingTimeMillis <= 0) {\n      this.callback();\n      this.remainingTimeMillis = this.defaultTimeMillis;\n    } else {\n      this.remainingTimeMillis = newRemainingTimeMillis;\n    }\n\n    return this;\n  }\n\n  pause() {\n    this.timerState = TimerState.PAUSED;\n    return this;\n  }\n\n  resume() {\n    this.timerState = TimerState.RUNNING;\n    return this;\n  }\n\n  reset () {\n    this.remainingTimeMillis = this.defaultTimeMillis;\n    return this;\n  }\n\n  togglePauseResumeAndReturn() {\n    var timerState = this.timerState;\n    if (timerState === TimerState.PAUSED) {\n      this.timerState = TimerState.RUNNING;\n    } else if (timerState === TimerState.RUNNING) {\n      this.timerState = TimerState.PAUSED;\n    } else {\n      throw new Error(\"Cannot toggle timer in state: \" + timerState);\n    }\n    return this;\n  }\n\n  getState() {\n    return this.timerState;\n  }\n\n  getRemainingTime() {\n    return Math.floor(this.remainingTimeMillis / 1000);\n  }\n}\n","import React from 'react';\nimport Button from './Button';\nimport * as TimeUtils from './TimeUtils';\n\n// props::callback\n// props::pollIntervalMillis\nclass TimerComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: null,\n    };\n  }\n\n  componentDidMount() {\n    const tickIntervalMillis = 1000;\n\n    // Start a timer.\n    this.setState({timer: new TimeUtils.Timer(\n      TimeUtils.TimerState.RUNNING,\n      /*remainingTimeMillis=*/ this.props.pollIntervalMillis,\n      /*defaultTimeMillis=*/ this.props.pollIntervalMillis,\n      () => this.props.callback())}\n    );\n\n    // Every second, decrement by a second and handle side-effects.\n    this.timerId = setInterval(\n      () =>\n        this.setState({timer: this.state.timer.decrement(tickIntervalMillis)}),\n      tickIntervalMillis);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <div className=\"card border-secondary TimerComponent\">\n        {this.renderTimer()}\n        {this.renderButtonGroup()}\n      </div>\n    );\n  }\n\n  togglePauseResumeTimer() {\n    if (this.state.timer.timerState === TimeUtils.TimerState.RUNNING) {\n      this.setState({timer: this.state.timer.pause()});\n    } else if (this.state.timer.timerState === TimeUtils.TimerState.PAUSED) {\n      this.setState({timer: this.state.timer.resume()});\n    }\n  }\n\n  resetTimer() {\n    this.setState({timer: this.state.timer.reset()});\n  }\n\n  renderTimer() {\n    var timer = this.state.timer;\n    var timerText = (timer == null)\n      ? \"No timer present\"\n      : timer.getRemainingTime();\n\n    return (\n      <div className=\"container\">\n        <h2>\n          <span className=\"badge badge-secondary\">\n            {timerText}\n          </span>\n        </h2>\n      </div>\n    );\n  }\n\n  renderButtonGroup() {\n    return (\n      <div className=\"buttonGroup\" role=\"group\">\n        {this.renderToggleButton()}\n        {this.renderResetButton()}\n      </div>\n    );\n  }\n\n  renderToggleButton() {\n    var buttonText;\n    if (this.state.timer == null) {\n      buttonText = \"Pause/Resume\";\n    } else {\n      switch (this.state.timer.timerState) {\n        case TimeUtils.TimerState.RUNNING:\n          buttonText = \"Pause\";\n          break;\n        case TimeUtils.TimerState.PAUSED:\n          buttonText = \"Resume\";\n          break;\n        default:\n          throw new Error(\"Cannot toggle timer in state: \" + this.state.timer.timerState);\n      }\n    }\n\n    return(\n      <Button\n        text={buttonText}\n        handleClick={() => this.togglePauseResumeTimer()}/>\n    );\n  }\n\n  renderResetButton() {\n    return(\n      <Button\n        text={\"Reset\"}\n        handleClick={() => this.resetTimer()}/>\n    );\n  }\n}\n\nexport default TimerComponent;\n","import React from 'react';\nimport PositionComponent from './PositionComponent';\nimport SensorsComponent from './SensorsComponent';\nimport TimerComponent from './TimerComponent';\nimport * as Sensor from './Sensor';\nimport * as ResponseUtils from './ResponseUtils';\n\n//\n// Helper methods\n//\n\nfunction createSensorModel(jsonResult) {\n  try {\n    var stats = JSON.parse(jsonResult.Stats);\n\n    var timeData = {\n      [Sensor.TimeDataKeys.REALTIME]: stats.v,\n      [Sensor.TimeDataKeys.TEN_MINUTES]: stats.v1,\n      [Sensor.TimeDataKeys.THIRTY_MINUTES]: stats.v2,\n      [Sensor.TimeDataKeys.ONE_HOUR]: stats.v3,\n      [Sensor.TimeDataKeys.SIX_HOURS]: stats.v4,\n      [Sensor.TimeDataKeys.ONE_DAY]: stats.v5,\n    };\n    var positionData = constructPositionData(\n      jsonResult.Lat, jsonResult.Lon);\n\n    return ResponseUtils.ResponseSuccess(\n      new Sensor.SensorModel(timeData, positionData));\n  } catch (err) {\n    // JSON parsing may fail due to absent or malformatted fields.\n    return ResponseUtils.ResponseFailure(err);\n  }\n}\n\n// Wrap a latitude and longitude in a PositionData object.\nfunction constructPositionData(latitude, longitude) {\n  return {\n      [Sensor.PositionKeys.LATITUDE]: latitude,\n      [Sensor.PositionKeys.LONGITUDE]: longitude,\n    };\n}\n\n// Throws an error on a failed response, otherwise returns the response.\nfunction checkResponseOk(response) {\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  return response;\n}\n\n// Reads raw sensor results from PurpleAir.\n// Future function.\n// The fetched result is JSON-formatted and contains metadata followed by a\n// single \"results\" array.\nfunction getSensorResults() {\n  const srcUrl = \"https://www.purpleair.com/json\";\n  return fetch(srcUrl)\n    .then(response => checkResponseOk(response))\n    .then(response => response.json())\n    .then(jsonObj => jsonObj.results)\n    .then(results => results.map(result => createSensorModel(result)))\n    .then(results => results.filter(result => ResponseUtils.isSuccessful(result)))\n    .then(results => results.map(result => result[ResponseUtils.ResponseProperties.VALUE]));\n}\n\n//\n// React component\n//\n\nclass Status extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensorModelsResult: null,\n      positionResult: null,\n      timer: null,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"container Status\">\n        {<SensorsComponent\n          sensorModelsResult={this.state.sensorModelsResult}\n          positionResult={this.state.positionResult}\n          updateFn={() => this.updateStatusAsync(false)} />}\n\n        {<PositionComponent\n          positionResult={this.state.positionResult}\n          updateFn={() => this.updatePositionAsync()} />}\n\n        {<TimerComponent\n          pollIntervalMillis={this.props.pollIntervalMillis}\n          callback={() => this.updateStatusAsync(false)} />}\n      </div>\n    );\n  }\n\n  // Initial update on render.\n  componentDidMount() {\n    this.updateStatusAsync(true);\n  }\n\n  componentWillUnmount() {\n  }\n\n  // Handles errors in position fetching.\n  handlePositionError(error) {\n    const positionErrorString = \"Error in fetching position: \" + error.message;\n    this.setState({positionResult: ResponseUtils.ResponseFailure(positionErrorString)});\n  }\n\n  // Handles errors in sensor fetching.\n  handleResultError(error) {\n    const sensorModelsErrorString = \"Error in fetching sensors: \" + error.message;\n    this.setState({sensorModelsResult: ResponseUtils.ResponseFailure(sensorModelsErrorString)});\n  }\n\n  // Updates positionResult.\n  updatePositionAsync() {\n    this.setState({positionResult: ResponseUtils.ResponsePending()});\n\n    return function (options) {\n        return new Promise(function(resolve, reject) {\n          navigator.geolocation.getCurrentPosition(resolve, reject, options);\n        });\n    }()\n      .then(position =>\n        constructPositionData(\n          parseFloat(position.coords.latitude),\n          parseFloat(position.coords.longitude)))\n      .then(position => {\n        this.setState({\n          positionResult: ResponseUtils.ResponseSuccess(position)\n        });\n        // Return the original position, so that subsequent logic can work with it.\n        return position;\n      })\n    .catch(error => this.handlePositionError(error));\n  }\n\n  // Updates sensorModelsResult.\n  updateSensorModelsAsync() {\n    this.setState({sensorModelsResult: ResponseUtils.ResponsePending()});\n\n    return getSensorResults()\n      .then(sensorModels => {\n        this.setState({\n          sensorModelsResult: ResponseUtils.ResponseSuccess(sensorModels)\n        });\n        return sensorModels;\n      })\n      .catch(error => this.handleResultError(error));\n  }\n\n  // Fetches position and sensor readings, and updates the status.\n  updateStatusAsync(refreshPosition) {\n    console.log(\"[\" + new Date() + \"] updating...\");\n\n    var positionPromise;\n    var hasPreviousPosition =\n      (this.state.positionResult != null &&\n        this.state.positionResult[ResponseUtils.ResponseProperties.TAG] ===\n        ResponseUtils.ResponseStates.SUCCESS);\n    if (!refreshPosition && hasPreviousPosition) {\n      positionPromise = Promise.resolve(\n        this.state.positionResult[ResponseUtils.ResponseProperties.VALUE]);\n    } else {\n      positionPromise = this.updatePositionAsync();\n    }\n\n    var sensorModelsPromise = this.updateSensorModelsAsync();\n\n    Promise.all([positionPromise, sensorModelsPromise])\n      .then(results => {\n        console.log(\"[\" + new Date() + \"] finished updating.\");\n        console.log(results);\n      });\n  }\n}\n\nexport default Status;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CSSTransition} from 'react-transition-group';\nimport Button from './Button';\nimport Status from './Status';\nimport './index.css';\n\nclass Monitor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      statusActive: false,\n    };\n  }\n\n  renderButton() {\n    return(\n      <div className=\"container\">\n        <Button\n          text={\"What's my AQI?\"}\n          handleClick={() => this.toggleStatus()} />\n      </div>\n    );\n  }\n\n  toggleStatus() {\n    this.setState({statusActive: !this.state.statusActive});\n  }\n\n  renderStatusPlaceholder(statusActive, appearFn) {\n    // Exit animations wouldn't work, because of the immediate unrendering.\n    return(\n      <CSSTransition\n        in={statusActive}\n        appear={true}\n        timeout={300}\n        classNames=\"StatusTransition\"\n      >\n        <div className=\"container\">\n          {statusActive && appearFn}\n        </div>\n      </CSSTransition>\n    );\n  }\n\n  renderStatus() {\n    const pollIntervalMillis = 120000; // 2 minutes\n    return(\n      <Status pollIntervalMillis={pollIntervalMillis} />\n    );\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        {this.renderButton()}\n        {this.renderStatusPlaceholder(\n          this.state.statusActive,\n          this.renderStatus())}\n      </div>\n    );\n  }\n}\n\n// TODO: Maybe render an alert.\nReactDOM.render(\n  <Monitor />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}